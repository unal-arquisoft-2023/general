version: "3.8"

services:

  api_gateway:
    hostname: api_gateway
    container_name: medisync_api_gateway
    image: api_gateway_img
    build:
      context: ./Api-Gateway 
    ports:
      - 5555:5555
    networks:
      - medisync-network

  api_gateway_proxy:
    container_name: ag_proxy
    image: ag_proxy
    build: 
      context: ./proxy_back
    ports:
      - 9000:80
    networks:
      - medisync-network
    depends_on:
      - api_gateway

    
  appointments_ms:
    container_name: appointments_ms 
    image: appointments_ms_img 
    build:
      context: ./medisync_appointments_ms
      target: appointment_ms
    environment:
      - PORT=8081
      - DB_HOST=appointments_db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=medisyncdb
    ports:
      - 8081:8081
    networks:
      - medisync-network
    depends_on:
      - appointments_db
    restart: unless-stopped

  appointments_db:
    container_name: medisync_appointments_db
    image: postgres:15.4-alpine
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: medisyncdb
    ports:
      - 5432:5432
    networks:
      - medisync-network

  notification_ms:
    container_name: medisync_notification_ms 
    hostname: notification_ms
    image: notification_ms_img
    build:
      context: ./medisync_nofications_ms
    env_file:
      - notification.env
    ports:
      - 8888:8888
    networks:
      - medisync-network
    depends_on:
      - notification_db
    restart: unless-stopped

  notification_db:
    container_name: medisync_notifications_db
    image: postgres:15.4-alpine
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: notifydb
    networks:
      - medisync-network

  users_ms:
    container_name: medisync_users_ms 
    hostname: users_ms
    image: users_ms_img
    build:
      context: ./medisync_users_ms
    ports:
      - 6000:6000
    networks:
      - medisync-network
    links:
      - "users_db:db"
    restart: unless-stopped


  users_db:
    container_name: medisync_users_db
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - medisync-network

  auth_ms:
    container_name: medisync_auth_ms 
    hostname: auth_ms
    image: auth_ms_img
    build:
      context: ./medisync_auth_ms
    ports:
      - 80:80
      - 8000:8000
    environment:
      - MONGO_URI=mongodb://root:example@db:27017/?authSource=admin
    networks:
      - medisync-network
    links:
      - "auth_db:db"
    restart: unless-stopped

  auth_db:
    container_name: medisync_auth_db
    image: mongo
    restart: always
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - medisync-network
  

  regmed_db:
    image: mysql:latest
    container_name: medisync_regmed_db
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: medisync
      MYSQL_PASSWORD: medisync
      MYSQL_DATABASE: RegistroMedico
    restart: unless-stopped
    networks:
      - medisync-network

  regmed_ms:
    stdin_open: true
    hostname: regmed_ms
    build:
      context: ./MediSync-RegistrosMedicos-MS
    image: img_regmed_ms
    container_name: medisync_regmed_ms
    links:
      - regmed_db
    ports:
      - 5000:5000
    environment:
      - DATABASE_URL=mysql://medisync:medisync@regmed_db:3306/RegistroMedico?schema=public
    restart: always
    networks:
      - medisync-network

  queue_mq:
    container_name: medisync_queue_mq
    image: rabbitmq:3-management
    hostname: queue_mq
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - medisync-network


  

networks:
  medisync-network:
